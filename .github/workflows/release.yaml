name: Release

on:
  push:
    branches:
      - '*'
      - 'renovate/*'
    tags:
      - v*
  pull_request:
    branches:
      - main
  merge_group:

jobs:
  rustfmt:
    name: Formatting (rustfmt)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Add mock extension build
        run: |
          mkdir -p extension/dist
          touch extension/dist/main.js

      - name: Load .env
        uses: falti/dotenv-action@v1.1.4
        with:
          export-variables: true
          log-variables: true
          keys-case: upper

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          # This must use nightly because some of the options used in `rustfmt.toml` are unstable and thus nightly-only.
          toolchain: nightly
          components: rustfmt

      - name: Rustfmt Check
        uses: clechasseur/rs-fmt-check@v2.0.8

  clippy:
    name: Linting (clippy)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Add mock extension build
        run: |
          mkdir -p extension/dist
          touch extension/dist/main.js

      - name: Load .env
        uses: falti/dotenv-action@v1.1.4
        with:
          export-variables: true
          log-variables: true
          keys-case: upper

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: "${{ env.RUST_VERSION }}"
          components: clippy

      - name: Set up cache
        uses: Swatinem/rust-cache@v2
        
      - name: Run clippy
        uses: clechasseur/rs-clippy-check@v4.0.2
        with:
          args: --all-features -- -Dwarnings

  nextest:
    name: Tests (nextest)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Add mock extension build
        run: |
          mkdir -p extension/dist
          touch extension/dist/main.js

      - name: Load .env
        uses: falti/dotenv-action@v1.1.4
        with:
          export-variables: true
          log-variables: true
          keys-case: upper

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: "${{ env.RUST_VERSION }}"

      - name: Install cargo-nextest
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-nextest 

      - name: Set up cache
        uses: Swatinem/rust-cache@v2

      - name: Build
        run:
          cargo build

      - name: Run nextest
        run:
          cargo nextest run --all-features --all-targets --profile=ci --no-fail-fast

      - name: Parse error locations
        uses: mikefarah/yq@master
        if: always()
        with:
          cmd: yq -i 'with(.testsuites.testsuite.testcase; .[] |= with(select(.failure != null) | .failure; (."+content" | capture("(?s)panicked at (?P<file>[^:]+):(?P<line>\d+):\d+:\n(?P<message>.*)")) as $match | ."+@file" = $match.file | ."+@line" = $match.line | ."+@message" = $match.message))' target/nextest/ci/junit.xml

      - name: Upload results to GitHub
        uses: mikepenz/action-junit-report@v4.3.1
        if: always()
        with:
          report_paths: target/nextest/ci/junit.xml
          annotate_only: true

  image:
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - rustfmt
      - clippy
      - nextest
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Load .env
        uses: falti/dotenv-action@v1.1.4
        with:
          export-variables: true
          log-variables: true
          keys-case: upper

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Extract metadata
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          build-args: |
            RUST_VERSION=${{ env.RUST_VERSION }}
            NODEJS_VERSION=${{ env.NODEJS_VERSION }}

  chart:
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Extract metadata
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: type=semver,pattern={{version}}
          flavor: latest=false

      - name: Set image tag
        uses: mikefarah/yq@v4.45.1
        with:
          cmd: yq -i '.image.tag = "${{ steps.metadata.outputs.version }}"' chart/values.yaml

      - name: Generate CRDs
        run: |
          docker run --rm ${{ steps.metadata.outputs.tags }} crdgen > chart/crds.yaml

      - name: Push Helm chart
        uses: gacts/run-and-post-run@v1
        with:
          run: |
            echo ${{ github.token }} | helm registry login -u ${{ github.repository_owner }} --password-stdin ghcr.io
            helm package chart --version "${{ steps.metadata.outputs.version }}-chart" --app-version "${{ steps.metadata.outputs.version }}"
            helm push "zigbee2mqtt-operator-${{ steps.metadata.outputs.version }}-chart.tgz" "oci://${DOCKER_METADATA_OUTPUT_TAGS%/*}"
          post: |
            helm registry logout ghcr.io
