name: Container Image

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:
    branches:
      - main

jobs:
  image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Load .env
        uses: falti/dotenv-action@v1.0.4
        with:
          export-variables: true
          log-variables: true
          keys-case: upper

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Extract metadata
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          build-args: |
            RUST_VERSION=${{ env.RUST_VERSION }}

      # The checks are faster than the image builds so it's unlikely this is ever actually a _wait_, but we want to avoid pushing the image if the checks fail.
      - name: Wait for checks workflow to succeed
        uses: emilgoldsmith/wait-for-workflows-to-succeed@v1.7
        with:
          wait-interval-seconds: 5
          wait-max-seconds: 30
          repo-token: ${{ github.token }}
          workflows: 'checks.yaml'

      - name: Push
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          build-args: |
            RUST_VERSION=${{ env.RUST_VERSION }}
